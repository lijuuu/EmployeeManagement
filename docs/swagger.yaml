basePath: /
definitions:
  customerr.ErrorResponse:
    properties:
      error:
        example: Invalid request body
        type: string
    type: object
  database.Credentials:
    properties:
      email:
        example: admin@gmail.com
        type: string
      password:
        example: password
        type: string
    type: object
  database.Employee:
    properties:
      created_at:
        type: string
      hired_date:
        type: string
      id:
        type: string
      name:
        type: string
      position:
        type: string
      salary:
        type: number
      updated_at:
        type: string
    type: object
  database.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
host: employeemanagement-69ga.onrender.com
info:
  contact:
    email: liju@example.com
    name: Liju Thomas
  description: This is a sample server for managing employees.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Employee Management API
  version: "1.0"
paths:
  /employees:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all employees. No authentication required.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Employee'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      summary: List all employees
      tags:
      - employees
    post:
      consumes:
      - application/json
      description: Create a new employee record. Requires an `Authorization` header
        with a valid Bearer token (`Bearer <token>`).
      parameters:
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/database.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/database.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new employee
      tags:
      - employees
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific employee. Requires an `Authorization` header
        with a valid Bearer token (`Bearer <token>`).
      parameters:
      - description: Employee ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an employee
      tags:
      - employees
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific employee. No authentication required.
      parameters:
      - description: Employee ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      summary: Get employee by ID
      tags:
      - employees
    put:
      consumes:
      - application/json
      description: Update details of a specific employee. Requires an `Authorization`
        header with a valid Bearer token (`Bearer <token>`).
      parameters:
      - description: Employee ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Employee data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/database.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Employee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an employee
      tags:
      - employees
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate admin and return a JWT token for use in the Authorization
        header as `Bearer <token>`.
      parameters:
      - description: Admin credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/database.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/customerr.ErrorResponse'
      summary: Admin login
      tags:
      - auth
swagger: "2.0"
