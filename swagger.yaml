openapi: 3.0.3
info:
  title: Employee Management API
  description: API for managing employee records with admin authentication
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /login:
    post:
      summary: Admin login
      description: Authenticate admin and return JWT token
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Successful login with JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employees:
    post:
      summary: Create a new employee
      description: Create a new employee record
      tags:
        - employees
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List all employees
      description: Retrieve a list of all employees
      tags:
        - employees
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employees/{id}:
    get:
      summary: Get employee by ID
      description: Retrieve details of a specific employee
      tags:
        - employees
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid employee ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an employee
      description: Update details of a specific employee
      tags:
        - employees
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid employee ID or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an employee
      description: Delete a specific employee
      tags:
        - employees
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Employee ID
      responses:
        '204':
          description: Employee deleted successfully
        '400':
          description: Invalid employee ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Employee:
      type: object
      required:
        - name
        - position
        - salary
        - hired_date
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the employee
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: Employee's full name
          example: "John Doe"
        position:
          type: string
          description: Employee's job title
          example: "Software Engineer"
        salary:
          type: number
          format: float
          description: Employee's annual salary
          example: 60000.0
        hired_date:
          type: string
          format: date
          description: Date the employee was hired
          example: "2024-06-01"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the employee record was created
          example: "2024-06-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the employee record was last updated
          example: "2024-06-01T12:00:00Z"
    Credentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: Admin email address
          example: "admin@example.com"
        password:
          type: string
          description: Admin password
          example: "securepassword"
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid request body"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT