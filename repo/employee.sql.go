// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employee.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (name, position, salary, hired_date)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateEmployeeParams struct {
	Name      string      `json:"name"`
	Position  string      `json:"position"`
	Salary    int32       `json:"salary"`
	HiredDate pgtype.Date `json:"hired_date"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Position,
		arg.Salary,
		arg.HiredDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployeeByID = `-- name: GetEmployeeByID :one
SELECT id, name, position, salary, hired_date, created_at, updated_at
FROM employees
WHERE id = $1
`

func (q *Queries) GetEmployeeByID(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeByID, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Position,
		&i.Salary,
		&i.HiredDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, name, position, salary, hired_date, created_at, updated_at
FROM employees
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Position,
			&i.Salary,
			&i.HiredDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employees
SET name = $1, position = $2, salary = $3, hired_date = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $5
`

type UpdateEmployeeParams struct {
	Name      string      `json:"name"`
	Position  string      `json:"position"`
	Salary    int32       `json:"salary"`
	HiredDate pgtype.Date `json:"hired_date"`
	ID        int32       `json:"id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee,
		arg.Name,
		arg.Position,
		arg.Salary,
		arg.HiredDate,
		arg.ID,
	)
	return err
}
